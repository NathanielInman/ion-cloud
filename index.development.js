!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("ion",[],t):"object"==typeof exports?exports.ion=t():e.ion=t()}(window,function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var a=t[r]={i:r,l:!1,exports:{}};return e[r].call(a.exports,a,a.exports,n),a.l=!0,a.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s="./src/lib/index.js")}({"./src/lib/clouds/bubbles.js":
/*!***********************************!*\
  !*** ./src/lib/clouds/bubbles.js ***!
  \***********************************/
/*! no static exports found */function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.bubbles=function(e){var t=this,n=e.startX,a=e.startY,i=e.width,o=e.height,s=e.color,u=e.quantity,l=e.distance,c=e.duration,h=e.ion,f=h||new this.Ion(this.easel);n=n||0,a=a||0,i=i||100,o=o||100,f.tweenDuration=c||1e3,f.tweenCurrent=function(){return Math.floor(Math.random()*f.tweenDuration)},f.quantity=u,f.states=["initial"],f.clear=!1,f.startX=function(){return t.camera.x+n+Math.random()*i},f.startY=function(){return t.camera.y+a+Math.random()*o},f.endX=function(e){return e},f.endY=function(e){return e-l},f.size=function(){return 2*Math.random()},f.color=function(e){var t=void 0,n=f.tweenDuration/2;t=e.tweenCurrent<=n?e.tweenCurrent/n:(n-Math.abs(n-e.tweenCurrent))/n;var a=(0,r.ink)(s,{format:"object"});return"rgba("+a.r+","+a.g+","+a.b+","+t+")"},f.tweenType=6,f.onParticleEnd=f.reevaluate,h?(f.collection.forEach(function(e){f.reevaluate(e),e.tweenCurrent=f.tweenCurrent()}),f.active=!0):f.populate();return f};var r=n(/*! ../../lib/ink */"./src/lib/ink.js")},"./src/lib/clouds/flame.js":
/*!*********************************!*\
  !*** ./src/lib/clouds/flame.js ***!
  \*********************************/
/*! no static exports found */function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.flame=function(e){var t=this,n=e.startX,r=e.startY,a=e.width,i=e.height,o=e.color,s=e.quantity,u=new this.Ion(this.easel);return n=n||0,r=r||0,a=a||20,i=i||100,u.quantity=s,u.states=["initial"],u.clear=!1,u.color=o||"rgba(250,170,0,0.2)",u.startX=function(){return t.camera.x+n+Math.random()*a-a/2},u.startY=function(){return t.camera.y+r},u.endX=function(){return t.camera.x+n},u.endY=function(){return t.camera.y+r-i},u.windX=function(){return.5*Math.random()-.25},u.windY=function(){return 2*Math.random()-2},u.tweenType=function(){return Math.floor(10*Math.random()+10)},u.tweenDuration=function(){return Math.floor(300*Math.random()+300)},u.onEscape=function(e){this.onParticleEnd(e)},u.onParticleEnd=u.reevaluate,u.onMove=function(e){var t=(i+a)/4;e.tweenCurrent>.15*e.tweenDuration?this.onParticleEnd(e):e.size=t-t/e.tweenDuration*e.tweenCurrent},u.populate(),u}},"./src/lib/clouds/index.js":
/*!*********************************!*\
  !*** ./src/lib/clouds/index.js ***!
  \*********************************/
/*! no static exports found */function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(/*! ./smoke */"./src/lib/clouds/smoke.js");Object.defineProperty(t,"smoke",{enumerable:!0,get:function(){return r.smoke}});var a=n(/*! ./flame */"./src/lib/clouds/flame.js");Object.defineProperty(t,"flame",{enumerable:!0,get:function(){return a.flame}});var i=n(/*! ./vortex */"./src/lib/clouds/vortex.js");Object.defineProperty(t,"vortex",{enumerable:!0,get:function(){return i.vortex}});var o=n(/*! ./laser */"./src/lib/clouds/laser.js");Object.defineProperty(t,"laser",{enumerable:!0,get:function(){return o.laser}});var s=n(/*! ./bubbles */"./src/lib/clouds/bubbles.js");Object.defineProperty(t,"bubbles",{enumerable:!0,get:function(){return s.bubbles}})},"./src/lib/clouds/laser.js":
/*!*********************************!*\
  !*** ./src/lib/clouds/laser.js ***!
  \*********************************/
/*! no static exports found */function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.laser=function(e){var t=this,n=e.startX,r=e.startY,a=e.endX,i=e.endY,o=e.size,s=200,u=new this.Ion(this.easel);return n=n||0,r=r||0,a=a||0,i=i||0,o=o||10,u.states=["initial"],u.clear=!1,u.color="rgba(250,250,150,0.5)",u.startX=function(){return t.camera.x+a},u.startY=function(){return t.camera.y+i},u.endX=function(){return t.camera.x+a-o/2+Math.random()*o},u.endY=function(){return t.camera.y+i-o/2+Math.random()*o},u.windX=function(){return 1.5*Math.random()-.75},u.windY=function(){return 1.5*Math.random()-.75},u.size=function(){return Math.floor(2*Math.random()+2)},u.tweenType=function(){return Math.floor(5*Math.random()+10)},u.tweenDuration=function(){return Math.floor(50*Math.random()+100)},u.onParticleEnd=function(e){this.collection.splice(e.id,1),this.collection.forEach(function(e,t){return e.id=t})},u.onCreate=function(){return s--},u.populate(),u.draw=function(){t.easel.ctx.strokeStyle="rgba(100,100,250,"+5e-4*s+")",t.easel.ctx.lineWidth=17,s>0&&(t.easel.ctx.beginPath(),t.easel.ctx.moveTo(t.camera.x+n+3,t.camera.y+r),t.easel.ctx.lineTo(t.camera.x+a+3,t.camera.y+i),t.easel.ctx.stroke(),t.easel.ctx.strokeStyle="#DDF",t.easel.ctx.lineWidth=2,t.easel.ctx.beginPath(),t.easel.ctx.moveTo(t.camera.x+n+3,t.camera.y+r),t.easel.ctx.lineTo(t.camera.x+a+3,t.camera.y+i),t.easel.ctx.stroke())},u}},"./src/lib/clouds/smoke.js":
/*!*********************************!*\
  !*** ./src/lib/clouds/smoke.js ***!
  \*********************************/
/*! no static exports found */function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.smoke=function(e){var t=this,n=e.startX,a=e.startY,i=e.width,o=e.height,s=e.color,u=e.quantity,l=e.ion,c=l||new this.Ion(this.easel);n=n||0,a=a||0,i=i||20,o=o||100,c.quantity=u,c.states=["initial"],c.clear=!1,c.color=function(e){var t=void 0,n=e.tweenDuration/2;t=e.tweenCurrent<=n?e.tweenCurrent/n:(n-Math.abs(n-e.tweenCurrent))/n;var a=(0,r.ink)(s,{format:"object"});return"rgba("+a.r+","+a.g+","+a.b+","+t+")"},c.startX=function(){return t.camera.x+n+Math.random()*i},c.startY=function(){return t.camera.y+a+Math.random()*o},c.endX=function(e){return t.camera.x+e+Math.random()*i/4-i/8},c.endY=function(){return t.camera.y+a},c.tweenType=function(){return[1,4,7,10,13,15][Math.floor(6*Math.random())]},c.tweenDuration=function(){return Math.floor(300*Math.random()+300)},c.tweenCurrent=function(){return Math.floor(Math.random()*c.tweenDuration())},c.onEscape=function(e){this.onParticleEnd(e)},c.onParticleEnd=c.reevaluate,c.size=function(){return 4*Math.random()},c.onMove=function(e){var t=(o+i)/8;e.tweenCurrent>.15*e.tweenDuration?this.onParticleEnd(e):e.size=t-t/e.tweenDuration*e.tweenCurrent},l?(c.collection.forEach(function(e){c.reevaluate(e),e.tweenCurrent=c.tweenCurrent()}),c.active=!0):c.populate();return c};var r=n(/*! ../../lib/ink */"./src/lib/ink.js")},"./src/lib/clouds/vortex.js":
/*!**********************************!*\
  !*** ./src/lib/clouds/vortex.js ***!
  \**********************************/
/*! no static exports found */function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.vortex=function(e){var t=this,n=e.startX,r=e.startY,a=e.size,i=e.quantity,o=e.iterations,s=e.callback,u=new this.Ion(this.easel);return n=n||0,r=r||0,a=a||300,o=o||1/0,u.quantity=i,u.states=["initial"],u.clear=!1,u.color="rgba(200,200,255,0.7)",u.startX=function(){return Math.abs(t.camera.x+Math.random()*a-a/2+n)+1},u.startY=function(){return Math.abs(t.camera.y+Math.random()*a-a/2+r)+1},u.endX=function(){return t.camera.x+n},u.endY=function(){return t.camera.y+r},u.size=function(){return 4*Math.random()+1},u.tweenType="ease-out-circular",u.tweenDuration=function(){return Math.floor(100*Math.random()+100)},u.onParticleEnd=function(e){o<50&&o>0?("function"==typeof s&&(s(),s=void 0),o--):o>0?(o--,this.reevaluate(e)):0===o&&(u.finished=!0)},u.onMove=function(e){e.endX=u.endX(),e.endY=u.endY()},u.populate(15),u}},"./src/lib/dice.js":
/*!*************************!*\
  !*** ./src/lib/dice.js ***!
  \*************************/
/*! no static exports found */function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();t.Dice=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.string=t,this.compileStatements()}return r(e,[{key:"compileStatements",value:function(){var e=this,t=this.string.split(/(\+|\-)/g),n=t.filter(function(e){return!["+","-"].includes(e)}),r=t.filter(function(e){return["+","-"].includes(e)});return this.statements=[],r.unshift("+"),n.forEach(function(t,a){e.statements.push({operator:r[a],operation:n[a]})}),this.statements}},{key:"randomInteger",value:function(e,t){return Math.floor(Math.random()*(t-e))+e}},{key:"roll",value:function(){var e=this,t=0;return this.statements.forEach(function(n){var r=a(n.operation),o=i(n.operation);"+"===n.operator?t+=e.randomInteger(r,o):t-=e.randomInteger(r,o)}),t}},{key:"min",get:function(){var e=0;return this.statements.forEach(function(t){"+"===t.operator?e+=a(t.operation):e-=a(t.operation)}),e}},{key:"max",get:function(){var e=0;return this.statements.forEach(function(t){"+"===t.operator?e+=i(t.operation):e-=i(t.operation)}),e}}]),e}();function a(e){return+e.split(/d/g)[0]}function i(e){var t=e.split(/d/g);return t.length>1?t[0]*t[1]:+t[0]}},"./src/lib/easel.js":
/*!**************************!*\
  !*** ./src/lib/easel.js ***!
  \**************************/
/*! no static exports found */function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var i=t.Easel=function(){function e(t){var n=this;if(a(this,e),!window.CanvasRenderingContext2D)return this.activated=!1,!1;this.activated=!0,this.canvas=document.createElement("canvas"),this.ctx=t?this.canvas.getContext("webgl"):this.canvas.getContext("2d"),this.viewport=this.acquireViewport(),window.onresize=function(){n.viewport=n.acquireViewport(),n.resizeCanvas(),n.config(),n.redraw()},this.background="#000",this.started=!1,document.body.appendChild(this.canvas);var r=document.createElement("style");r.type="text/css",r.rel="stylesheet",r.innerHTML="body{background-color:"+this.background+";margin:0;}\n      canvas{position:fixed;left:0;top:0;right:0;bottom:0;}",document.querySelector("head").appendChild(r),this.resizeCanvas()}return r(e,[{key:"resizeCanvas",value:function(){this.canvas.width=this.viewport.w,this.canvas.height=this.viewport.h}},{key:"acquireContext",value:function(){this.ctx=this.canvas.getContext("2d")}},{key:"acquireViewport",value:function(){var e=window,t="inner";return e.innerWidth||(t="client",e=document.documentElement||document.body),{w:e[t+"Width"],h:e[t+"Height"]}}},{key:"redraw",value:function(){this.started||(this.config(),this.started=!0),this.onDraw()}},{key:"config",value:function(){}},{key:"onDraw",value:function(){this.ctx.fillStyle=this.background,this.ctx.fillRect(0,0,this.viewport.width,this.viewport.height)}}]),e}();t.Easel3d=function(e){function t(){return a(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,!0))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,i),t}()},"./src/lib/index.js":
/*!**************************!*\
  !*** ./src/lib/index.js ***!
  \**************************/
/*! no static exports found */function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(/*! ./ion */"./src/lib/ion.js");Object.defineProperty(t,"Ion",{enumerable:!0,get:function(){return r.Ion}});var a=n(/*! ./ionCloud */"./src/lib/ionCloud.js");Object.defineProperty(t,"IonCloud",{enumerable:!0,get:function(){return a.IonCloud}});var i=n(/*! ./easel */"./src/lib/easel.js");Object.defineProperty(t,"Easel",{enumerable:!0,get:function(){return i.Easel}}),Object.defineProperty(t,"Easel3d",{enumerable:!0,get:function(){return i.Easel3d}});var o=n(/*! ./ink */"./src/lib/ink.js");Object.defineProperty(t,"ink",{enumerable:!0,get:function(){return o.ink}}),Object.defineProperty(t,"convert2rgba",{enumerable:!0,get:function(){return o.convert2rgba}}),Object.defineProperty(t,"convert2rgb",{enumerable:!0,get:function(){return o.convert2rgb}}),Object.defineProperty(t,"convert2hsba",{enumerable:!0,get:function(){return o.convert2hsba}}),Object.defineProperty(t,"convert2hsva",{enumerable:!0,get:function(){return o.convert2hsva}}),Object.defineProperty(t,"convert2hsb",{enumerable:!0,get:function(){return o.convert2hsb}}),Object.defineProperty(t,"convert2hsv",{enumerable:!0,get:function(){return o.convert2hsv}}),Object.defineProperty(t,"convert2hsla",{enumerable:!0,get:function(){return o.convert2hsla}}),Object.defineProperty(t,"convert2hsl",{enumerable:!0,get:function(){return o.convert2hsl}}),Object.defineProperty(t,"convert2hex",{enumerable:!0,get:function(){return o.convert2hex}}),Object.defineProperty(t,"convert2cmyk",{enumerable:!0,get:function(){return o.convert2cmyk}});var s=n(/*! ./phaser */"./src/lib/phaser.js");Object.defineProperty(t,"Phaser",{enumerable:!0,get:function(){return s.Phaser}});var u=n(/*! ./dice */"./src/lib/dice.js");Object.defineProperty(t,"Dice",{enumerable:!0,get:function(){return u.Dice}})},"./src/lib/ink.js":
/*!************************!*\
  !*** ./src/lib/ink.js ***!
  \************************/
/*! no static exports found */function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){return function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,a=!1,i=void 0;try{for(var o,s=e[Symbol.iterator]();!(r=(o=s.next()).done)&&(n.push(o.value),!t||n.length!==t);r=!0);}catch(e){a=!0,i=e}finally{try{!r&&s.return&&s.return()}finally{if(a)throw i}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}();function a(e){var t="invalid";if(e.includes("rgba"))t=function(e){var t=e.replace(/(\(|\)|rgba)/g,"").split(","),n=r(t,4),a=n[0],i=n[1],o=n[2],s=n[3];if(a=0|+a,isNaN(+a)||"number"!=typeof a)throw Error("[Ink] Red rgba value is not a valid number. ("+a+")");a<0&&(console.warn("[Ink] Red rgba value was less than 0. ("+a+")"),console.warn("[Ink] Converting red value to 0..."),a=0);a>255&&(console.warn("[Ink] Red rgba value was greater than 255. ("+a+")"),console.warn("[Ink] Converting red value to 255..."),a=255);if(i=0|+i,isNaN(+i)||"number"!=typeof i)throw Error("[Ink] Green rgba value is not a valid number.");i<0&&(console.warn("[Ink] Green rgba value was less than 0. ("+i+")"),console.warn("[Ink] converting green value to 0..."),i=0);i>255&&(console.warn("[Ink] Green rgba value was greater than 255. ("+i+")"),console.warn("[Ink] Converting green value to 255..."),i=255);if(o=0|+o,isNaN(+o)||"number"!=typeof o)throw Error("[Ink] Blue rgba value is not a valid number.");o<0&&(console.warn("[Ink] Blur rgba value was less than 0. ("+o+")"),console.warn("[Ink] converting blue value to 0..."),o=0);o>255&&(console.warn("[Ink] Blue rgba value was greater than 255. ("+o+")"),console.warn("[Ink] Converting blue value to 255..."),o=255);return{r:a,g:i,b:o,a:s=+s}}(e);else if(e.includes("rgb"))t=function(e){var t=e.replace(/(\(|\)|rgb)/g,"").split(","),n=r(t,3),a=n[0],i=n[1],o=n[2];if(a=0|+a,isNaN(a)||"number"!=typeof a)throw Error("[Ink] Red rgb value is not a valid number.");a<0&&(console.warn("[Ink] Red rgb value was less than 0. ("+a+")"),console.warn("[Ink] Converting red value to 0..."),a=0);a>255&&(console.warn("[Ink] Red rgb value was greater than 255. ("+a+")"),console.warn("[Ink] Converting red value to 255..."),a=255);if(i=0|+i,isNaN(i)||"number"!=typeof i)throw Error("[Ink] Green rgb value is not a valid number.");i<0&&(console.warn("[Ink] Green rgb value was less than 0. ("+i+")"),console.warn("[Ink] converting green value to 0..."),i=0);i>255&&(console.warn("[Ink] Green rgb value was greater than 255. ("+i+")"),console.warn("[Ink] Converting green value to 255..."),i=255);if(o=0|+o,isNaN(o)||"number"!=typeof o)throw Error("[Ink] Blue rgb value is not a valid number.");o<0&&(console.warn("[Ink] Blue rgb value was less than 0. ("+o+")"),console.warn("[Ink] converting blue value to 0..."),o=0);o>255&&(console.warn("[Ink] Blue rgb value was greater than 255. ("+o+")"),console.warn("[Ink] Converting blue value to 255..."),o=255);return{r:a,g:i,b:o,a:1}}(e);else if(e.includes("hsba"))t=getObjectFromHsba(e);else if(e.includes("hsva"))t=i(e);else if(e.includes("hsb"))t=getObjectFromHsb(e);else if(e.includes("hsv"))t=function(e){var t=e.replace(/(\(|\)|hsb|hsv)/g,"").split(","),n=r(t,3),a=n[0],o=n[1],s=n[2];return i("hsva("+a+","+o+","+s+",1)")}(e);else if(e.includes("hsla"))t=o(e);else if(e.includes("hsl"))t=s(e);else if(e.includes("cmyk"))t=function(e){var t=e.replace(/(\(|\)|cmyk)/g,"").split(","),n=r(t,4),a=n[0],i=n[1],o=n[2],s=n[3];if(a=+a,isNaN(a)||"number"!=typeof a)throw Error("[Ink] Cyan cmyk is not a valid number.");a<0&&(console.warn("[Ink] Cyan cmyk was less than 0. ("+a+")"),console.warn("[Ink] Converting cyan value to 0..."),a=0);a>1.0001?(console.warn("[Ink] Cyan cmyk was greater than 1. ("+a+")"),console.warn("[Ink] Converting cyan value to 1."),a=1):a>1&&(a=1);if(i=+i,isNaN(i)||"number"!=typeof i)throw Error("[Ink] Magenta cmyk is not a valid number.");i<0&&(console.warn("[Ink] Magenta cmyk was less than 0. ("+i+")"),console.warn("[Ink] Converting magenta value to 0..."),i=0);i>1.0001?(console.warn("[Ink] Magenta cmyk was greater than 1 ("+i+")."),console.warn("[Ink] Converting magenta value to 1."),i=1):i>1&&(i=1);if(o=+o,isNaN(o)||"number"!=typeof o)throw Error("[Ink] Yellow cmyk is not a valid number.");i<0&&(console.warn("[Ink] Yellow cmyk was less than 0. ("+i+")"),console.warn("[Ink] Converting yellow value to 0..."),o=0);o>1.0001?(console.warn("[Ink] Yellow cmyk was greater than 1. ("+o+")"),console.warn("[Ink] Converting yellow value to 1."),o=1):o>1&&(o=1);if(s=+s,isNaN(s)||"number"!=typeof s)throw Error("[Ink] Black cmyk is not a valid number.");s<0&&(console.warn("[Ink] Black cmyk was less than 0. ("+s+")"),console.warn("[Ink] Converting black value to 0..."),s=0);s>1.0001?(console.warn("[Ink] Black cmyk was greater than 1. ("+s+")"),console.warn("[Ink] Converting black value to 1."),s=1):s>1&&(s=1);return{r:255*(1-a)*(1-s),g:255*(1-i)*(1-s),b:255*(1-o)*(1-s),a:1}}(e);else if(e.includes("#")&&4===e.length)t=function(e){if("#"!==e[0])throw Error("[Ink] Invalid short hex format.");if(isNaN(parseInt(e.substr(1,3),16)))throw Error("[Ink] Invalid characters in short hex color.");return{r:parseInt(e.substr(1,1)+e.substr(1,1),16),g:parseInt(e.substr(2,1)+e.substr(2,1),16),b:parseInt(e.substr(3,1)+e.substr(3,1),16),a:1}}(e);else{if(!e.includes("#")||7!==e.length)throw Error("[Ink] Unknown color type.");t=function(e){if("#"!==e[0])throw Error("[Ink] Invalid long hex format.");if(isNaN(parseInt(e.substr(1,6),16)))throw Error("[Ink Invalid characters in long hex color.");return{r:parseInt(e.substr(1,2),16),g:parseInt(e.substr(3,2),16),b:parseInt(e.substr(5,2),16),a:1}}(e)}return t}function i(e){var t=e.replace(/(\(|\)|hsba|hsva)/g,"").split(","),n=r(t,4),a=n[0],i=n[1],o=n[2],s=n[3];if(a=+a,isNaN(a)||"number"!=typeof a)throw Error("[Ink] Hue hsv(a)/hsb(a) is not a valid number.");if(a>360.0001&&(console.warn("[Ink] Hue hsv(a)/hsb(a) was greater than 360. ("+a+")"),console.warn("[Ink] Converting hue value to "+a%360+"."),a%=360),a<0&&(console.warn("[Ink] Hue hsv(a)/hsb(a) was less than 0. ("+a+")"),console.warn("[Ink] Converting hue value to "+(360+a%360)+"."),a=360-a%360),i=+i,isNaN(i)||"number"!=typeof i)throw Error("[Ink] Saturation hsv(a)/hsb(a) is not a valid number.");if(i<0&&(console.warn("[Ink] Saturation hsv(a)/hsb(a) was less than 0. ("+i+")"),console.warn("[Ink] Converting saturation value to 0..."),i=0),i>1.0001&&(console.warn("[Ink] Saturation hsv(a)/hsb(a) was greater than 0. ("+i+")"),console.warn("[Ink] Converting saturation value to 1..."),i=1),o=+o,isNaN(o)||"number"!=typeof o)throw Error("[Ink] Brightness/value hsv(a)/hsb(a) is not a valid number.");o<0&&(console.warn("[Ink] Brightness/value hsv(a)/hsb(a) was less than 0. ("+o+")"),console.warn("[Ink] Converting brightness to 0..."),o=0),o>1.0001&&(console.warn("[Ink] Brightness/value hsv(a)/hsb(a) was greater than 1. ("+o+")"),console.warn("[Ink] Converting brightness to 1..."),o=1),s=+s;var u=o*i,l=u*(1-Math.abs(a/60%2-1)),c=o-u,h=function(e){return a<60?Math.round(255*([u,l,0][e]+c)):a<120?Math.round(255*([l,u,0][e]+c)):a<180?Math.round(255*([0,u,l][e]+c)):a<240?Math.round(255*([0,l,u][e]+c)):a<300?Math.round(255*([l,0,u][e]+c)):Math.round(255*([u,0,l][e]+c))},f=[h(0),h(1),h(2)];return{r:f[0],g:f[1],b:f[2],a:s}}function o(e){var t=e.replace(/(\(|\)|hsla)/g,"").split(","),n=r(t,4),a=n[0],i=n[1],o=n[2],s=n[3];if(a=0|+a,isNaN(a)||"number"!=typeof a)throw Error("[Ink] Hue hsl(a) is not a valid number.");if(a>360&&(console.warn("[Ink] Hue hsl(a) was greater than 360. ("+a+")"),console.warn("[Ink] Converting hue value to "+a%360+"."),a%=360),a<0&&(console.warn("[Ink] Hue hsl(a) was less than 0. ("+a+")"),console.warn("[Ink] Converting hue value to "+(360+a%360)+"."),a=360-a%360),i=+i,isNaN(i)||"number"!=typeof i)throw Error("[Ink] Saturation hsl(a) is not a valid number.");if(i<0&&(console.warn("[Ink] Saturation hsl(a) was less than 0. ("+i+")"),console.warn("[Ink] Converting saturation value to 0..."),i=0),i>1.0001?(console.warn("[Ink] Saturation hsl(a) was greater than 0. ("+i+")"),console.warn("[Ink] Converting saturation value to 1..."),i=1):i>1&&(i=1),o=+o,isNaN(o)||"number"!=typeof o)throw Error("[Ink] Lightness hsl(a) is not a valid number.");o<0&&(console.warn("[Ink] Lightness hsl(a) was less than 0. ("+o+")"),console.warn("[Ink] Converting lightness to 0..."),o=0),o>1.0001?(console.warn("[Ink] Lightness hsl(a) was greater than 1. ("+o+")"),console.warn("[Ink] Converting lightness to 1..."),o=1):o>1&&(o=1),s=+s;var u=(1-Math.abs(2*o-1))*i,l=u*(1-Math.abs(a/60%2-1)),c=o-u/2,h=function(e){return a<60?Math.round(255*([u,l,0][e]+c)):a<120?Math.round(255*([l,u,0][e]+c)):a<180?Math.round(255*([0,u,l][e]+c)):a<240?Math.round(255*([0,l,u][e]+c)):a<300?Math.round(255*([l,0,u][e]+c)):Math.round(255*([u,0,l][e]+c))},f=[h(0),h(1),h(2)];return{r:f[0],g:f[1],b:f[2],a:s}}function s(e){var t=e.replace(/(\(|\)|hsl)/g,"").split(","),n=r(t,3);return o("hsla("+n[0]+","+n[1]+","+n[2]+",1)")}function u(e){return"rgba("+e.r+","+e.g+","+e.b+","+e.a+")"}function l(e){return"rgb("+e.r+","+e.g+","+e.b+")"}function c(e){var t=e.r,n=e.g,r=e.b,a=e.a;t/=255,n/=255,r/=255;var i=Math.min(t,n,r),o=Math.max(t,n,r),s=o-i,u=void 0,l=void 0,c=o;return 0!==o?(l=s/o,u=t===o?(n-r)/s:n===o?2+(r-4)/s:4+(t-n)/s,(u*=60)<0&&(u+=360),isNaN(u)&&(u=0)):(u=0,l=0,c=0),"hsva("+u+","+l+","+c+","+a+")"}function h(e){var t=c(e).replace(/(\(|\)|hsva)/g,"").split(","),n=r(t,3);return"hsv("+n[0]+","+n[1]+","+n[2]+")"}function f(e){var t=c(e).replace(/(\(|\)|hsva)/g,"").split(","),n=r(t,4);return"hsba("+n[0]+","+n[1]+","+n[2]+","+n[3]+")"}function d(e){var t=c(e).replace(/(\(|\)|hsva)/g,"").split(","),n=r(t,3);return"hsba("+n[0]+","+n[1]+","+n[2]+")"}function b(e){var t=e.r,n=e.g,r=e.b;e.a;t/=255,n/=255,r/=255;var a=1-Math.max(t,n,r);return"cmyk("+(1-t-a)/(1-a)+","+(1-n-a)/(1-a)+","+(1-r-a)/(1-a)+","+a+")"}function v(e){var t=e.r,n=e.g,r=e.b,a=e.a;t/=255,n/=255,r/=255;var i=Math.max(t,n,r),o=Math.min(t,n,r),s=i-o,u=void 0,l=void 0,c=(i+o)/2;return s?(l=s/(1-Math.abs(2*c-1)),(u=i===t?(n-r)/s%6*60:i===n?60*((r-t)/s+2):60*((t-n)/s+4))<0&&(u=360+u)):u=l=0,"hsla("+u+","+l+","+c+","+a+")"}function g(e){var t=v(e).replace(/(\(|\)|hsla)/g,"").split(","),n=r(t,3);return"hsl("+n[0]+","+n[1]+","+n[2]+")"}function w(e){return"#"+e.r.toString(16).padStart(2,"0")+e.g.toString(16).padStart(2,"0")+e.b.toString(16).padStart(2,"0")}t.ink=function(e){var t=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},[]),n=a(e),i=n.r,o=n.g,m=n.b,p=n.a;if(isNaN(p)||"number"!=typeof p)throw Error("[Ink] Alpha value is not a valid number.");p<0&&(console.warn("[Ink] Alpha was less than 0. ("+p+")"),console.warn("[Ink] Converting alpha to 0..."),p=0);p>1.0001?(console.warn("[Ink] Alpha was greater than 1. ("+p+")"),console.warn("[Ink] Converting alpha to 1..."),p=1):p>1&&(p=1);if(t.r&&"number"!=typeof t.r||t.r&&isNaN(t.r))throw Error("[Ink] Red color weight is not a number.");if(t.r&&t.r<0)throw Error("[Ink] Red color weight must be greater than 0.");if(t.g&&"number"!=typeof t.g||t.g&&isNaN(t.g))throw Error("[Ink] Green color weight is not a number.");if(t.g&&t.g<0)throw Error("[Ink] Green color weight must be greater than 0.");if(t.b&&"number"!=typeof t.b||t.b&&isNaN(t.b))throw Error("[Ink] Blue color weight is not a number.");if(t.b&&t.b<0)throw Error("[Ink] Blue color weight must be greater than 0.");if(t.l&&"number"!=typeof t.l||t.l&&isNaN(t.l))throw Error("[Ink] Lightness weight is not a number.");if(t.s&&"number"!=typeof t.s||t.s&&isNaN(t.s))throw Error("[Ink] Saturation weight is not a number.");if(t.r<0||t.g<0||t.b<0||t.r>1||t.g>1||t.b>1)throw Error("[Ink] Color weights must be inclusively between 0 and 1.");if(t.a<0||t.a>1)throw Error("[Ink] Color alpha must be inclusively between 0 and 1.");if(t.minLightness&&"number"!=typeof t.minLightness)throw Error("[Ink] Min lightness is not a number.");if(t.minLightness&&isNaN(t.minLightness))throw Error("[Ink] Min lightness is not a number.");if(t.maxLightness&&"number"!=typeof t.maxLightness)throw Error("[Ink] Max lightness is not a number.");if(t.maxLightness&&isNaN(t.maxLightness))throw Error("[Ink] Max lightness is not a number.");if(t.lightness&&"number"!=typeof t.lightness)throw Error("[Ink] lightness is not a number.");if(t.lightness&&isNaN(t.lightness))throw Error("[Ink] lightness is not a number.");if(t.minSaturation&&"number"!=typeof t.minSaturation)throw Error("[Ink] Min saturation is not a number.");if(t.minSaturation&&isNaN(t.minSaturation))throw Error("[Ink] Min saturation is not a number.");if(t.maxSaturation&&"number"!=typeof t.maxSaturation)throw Error("[Ink] Max saturation is not a number.");if(t.maxSaturation&&isNaN(t.maxSaturation))throw Error("[Ink] Max saturation is not a number.");if(t.saturation&&"number"!=typeof t.saturation)throw Error("[Ink] Saturation is not a number.");if(t.saturation&&isNaN(t.saturation))throw Error("[Ink] Saturation is not a number.");if(t.object&&"boolean"!=typeof t.object)throw Error("[Ink] Object output parameter value is not a boolean.");if(t.minSaturation>t.maxSaturation){console.warn("[Ink] Min saturation must be smaller than max saturation."),console.warn("[Ink] Switching min and max saturations...");var y=[t.maxSaturation,t.minSaturation];t.minSaturation=y[0],t.maxSaturation=y[1]}if(t.minLightness>t.maxLightness){console.warn("[Ink] Min lightness must be smaller than max lightness."),console.warn("[Ink] Switching min and max lightness...");var k=[t.maxLighntess,t.minLightness];t.minLightness=k[0],t.maxLightness=k[1]}(t.minLightness&&t.lightness||t.maxLightness&&t.lightness)&&(console.warn("[Ink] Cannot have lightness setting and a threshold."),console.warn("[Ink] Ignoring lightness threshold..."),delete t.minLightness,delete t.maxLightness);(t.minSaturation&&t.saturation||t.maxSaturation&&t.saturation)&&(console.warn("[Ink] Cannot have saturation setting and a threshold."),console.warn("[Ink] Ignoring saturation threshold..."),delete t.minSaturation,delete t.maxSaturation);t.maxLightness&&t.minLightness&&t.maxLightness-t.minLightness<.01&&(console.warn("[Ink] Max and min lightness threshold too close."),console.warn("[Ink] Removing lightness threshold and using hard setting..."),t.lightness=t.minLightness,delete t.minLightness,delete t.maxLightness);t.minSaturation&&t.maxSaturation&&t.maxSaturation-t.minSaturation<.01&&(console.warn("[Ink] Max and min saturation threshold too close."),console.warn("[Ink] Removing saturation threshold and using hard setting..."),t.saturation=t.minSaturation,delete t.minSaturation,delete t.maxSaturation);t.r&&(i=Math.floor(t.r*i))>255&&(i=255);t.g&&(o=Math.floor(t.g*o))>255&&(o=255);t.b&&(m=Math.floor(t.b*m))>255&&(m=255);t.a&&(p=t.a);if(t.l){var I=g({r:i,g:o,b:m}).replace(/(\(|\)|hsl)/g,"").split(","),x=r(I,3),M=x[0],E=x[1],j=x[2];j=+j,j+=t.l;var C=s("hsl("+M+","+E+","+j+")");i=C.r,o=C.g,m=C.b}if(t.s){var Y=g({r:i,g:o,b:m}).replace(/(\(|\)|hsl)/g,"").split(","),P=r(Y,3),X=P[0],S=P[1],N=P[2];S=+S,S+=+t.s;var O=s("hsl("+X+","+S+","+N+")");i=O.r,o=O.g,m=O.b}if(t.minLightness||t.maxLightness||t.lightness){var _=g({r:i,g:o,b:m}).replace(/(\(|\)|hsl)/g,"").split(","),L=r(_,3),D=L[0],q=L[1],T=L[2];t.minLightness&&T<t.minLightness&&(T=t.minLightness),t.maxLightness&&T>t.maxLightness&&(T=t.maxLightness),t.lightness&&+T!==t.lightness&&(T=t.lightness);var z=s("hsl("+D+","+q+","+T+")");i=z.r,o=z.g,m=z.b}if(t.minSaturation||t.maxSaturation||t.saturation){var R=g({r:i,g:o,b:m}).replace(/(\(|\)|hsl)/g,"").split(","),H=r(R,3),B=H[0],F=H[1],G=H[2];t.minSaturation&&F<t.minSaturation&&(F=t.minSaturation),t.maxSaturation&&F>t.maxSaturation&&(F=t.maxSaturation),t.saturation&&+F!==t.saturation&&(F=t.saturation);var A=s("hsl("+B+","+F+","+G+")");i=A.r,o=A.g,m=A.b}i=Math.round(i),o=Math.round(o),m=Math.round(m),p=p.toFixed(3);var W=void 0;W=t.format&&"object"===t.format?{r:i,g:o,b:m,a:p}:t.format&&"hex"===t.format?w({r:i,g:o,b:m}):t.format&&"hsl"===t.format?g({r:i,g:o,b:m}):t.format&&"hsla"===t.format?v({r:i,g:o,b:m,a:p}):t.format&&"hsv"===t.format?h({r:i,g:o,b:m}):t.format&&"hsva"===t.format?c({r:i,g:o,b:m,a:p}):t.format&&"hsb"===t.format?d({r:i,g:o,b:m}):t.format&&"hsba"===t.format?f({r:i,g:o,b:m,a:p}):t.format&&"rgb"===t.format?l({r:i,g:o,b:m}):t.format&&"cmyk"===t.format?b({r:i,g:o,b:m}):u({r:i,g:o,b:m,a:p});return W},t.convert2rgba=function(e){return u(a(e))},t.convert2rgb=function(e){return l(a(e))},t.convert2hsba=function(e){return f(a(e))},t.convert2hsva=function(e){return c(a(e))},t.convert2hsb=function(e){return d(a(e))},t.convert2hsv=function(e){return h(a(e))},t.convert2hsla=function(e){return v(a(e))},t.convert2hsl=function(e){return g(a(e))},t.convert2hex=function(e){return w(a(e))},t.convert2cmyk=function(e){return b(a(e))}},"./src/lib/ion.js":
/*!************************!*\
  !*** ./src/lib/ion.js ***!
  \************************/
/*! no static exports found */function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();t.Ion=function(){function e(t){if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.active=!0,this.easel=t,this.ctx=t.ctx,this.collection=[],this.quantity=1,this.size=1,this.startX=0,this.startY=0,this.endX=1,this.endY=1,this.windX=0,this.windY=0,this.clear=!0,this.color="#48F",this.clearColor="#000",this.tweenType=0,this.tweenCurrent=0,this.tweenDuration=1e3,this.tweenSpeed=1,this.background=null,!this.ctx)throw new Error("Ion initialized without easel.")}return r(e,[{key:"tween",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=n.o,a=void 0===r?.3:r,i=n.d,o=void 0===i?e.tweenDuration:i,s=n.t,u=void 0===s?e.tweenCurrent:s,l=n.type,c=void 0===l?e.tweenType:l,h=n.b,f=void 0===h?"x"===t?e.startX:e.startY:h,d=n.c,b=void 0===d?"x"===t?e.endX-e.startX:e.endY-e.startY:d,v=void 0;if("linear"===c)v=b*u/o+f;else if("ease-in-quad"===c)v=b*(u/=o)*u+f;else if("ease-out-quad"===c)v=-b*(u/=o)*(u-2)+f;else if("ease-in-out-quad"===c)v=(u/=o/2)<1?b/2*u*u+f:-b/2*(--u*(u-2)-1)+f;else if("ease-in-cubic"===c)v=b*(u/=o)*u*u+f;else if("ease-out-cubic"===c)v=b*((u=u/o-1)*u*u+1)+f;else if("ease-in-out-cubic"===c)v=(u/=o/2)<1?b/2*u*u*u+f:b/2*((u-=2)*u*u+2)+f;else if("ease-in-quart"===c)v=b*(u/=o)*u*u*u+f;else if("ease-out-quart"===c)v=-b*((u=u/o-1)*u*u*u-1)+f;else if("ease-in-out-quart"===c)v=(u/=o/2)<1?b/2*u*u*u*u+f:-b/2*((u-=2)*u*u*u-2)+f;else if("ease-in-quint"===c)v=b*(u/=o)*u*u*u*u+f;else if("ease-out-quint"===c)v=b*((u=u/o-1)*u*u*u*u+1)+f;else if("ease-in-out-quint"===c)v=(u/=o/2)<1?b/2*u*u*u*u*u+f:b/2*((u-=2)*u*u*u*u+2)+f;else if("ease-in-sine"===c)v=-b*Math.cos(u/o*(Math.PI/2))+b+f;else if("ease-out-sine"===c)v=b*Math.sin(u/o*(Math.PI/2))+f;else if("ease-in-out-sine"===c)v=-b/2*(Math.cos(Math.PI*u/o)-1)+f;else if("ease-in-exponential"===c)v=0===u?f:b*Math.pow(2,10*(u/o-1))+f;else if("ease-out-exponential"===c)v=u===o?f+b:b*(1-Math.pow(2,-10*u/o))+f;else if("ease-in-out-exponential"===c)v=0===u?f:u===o?f+b:(u/=o/2)<1?b/2*Math.pow(2,10*(u-1))+f:b/2*(2-Math.pow(2,-10*--u))+f;else if("ease-in-circular"===c)v=-b*(Math.sqrt(1-(u/=o)*u)-1)+f;else if("ease-out-circular"===c)v=b*Math.sqrt(1-(u=u/o-1)*u)+f;else if("ease-in-out-circular"===c)v=(u/=o/2)<1?-b/2*(Math.sqrt(1-u*u)-1)+f:b/2*(Math.sqrt(1-(u-=2)*u)+1)+f;else if("ease-in-elastic-loose"===c)v=this.tween(e,t,{o:.5,type:"ease-in-elastic-normal"});else if("ease-in-elastic"===c)v=function(){var e=1.70158,t=0,n=b;return 0===u?f:1==(u/=o)?f+b:(t||(t=o*a),n<Math.abs(b+.1)?(n=b,e=t/4):e=t/(2*Math.PI)*Math.asin(b/n),-n*Math.pow(2,10*(u-=1))*Math.sin((u*o-e)*(2*Math.PI)/t)+f)}();else if("ease-in-elastic-strong"===c)v=this.tween(e,t,{o:.1,type:"ease-in-elastic-normal"});else if("ease-out-elastic-loose"===c)v=this.tween(e,t,{o:.5,type:"ease-out-elastic-normal"});else if("ease-out-elastic"===c)v=function(){var e=1.70158,t=0,n=b;return 0===u?f:1==(u/=o)?f+b:(t||(t=o*a),n<Math.abs(b+.1)?(n=b,e=t/4):e=t/(2*Math.PI)*Math.asin(b/n),n*Math.pow(2,-10*u)*Math.sin((u*o-e)*(2*Math.PI)/t)+b+f)}();else if("ease-out-elastic-strong"===c)v=this.tween(e,t,{o:.1,type:"ease-out-elastic-normal"});else if("ease-in-out-elastic-loose"===c)v=this.tween(e,t,{o:.5,type:"ease-in-out-elastic-normal"});else if("ease-in-out-elastic-normal"===c)v=function(){var e=1.70158,t=0,n=b;return 0===u?f:2==(u/=o/2)?f+b:(t||(t=o*(1.5*a)),n<Math.abs(b+.1)?(n=b,e=t/4):e=t/(2*Math.PI)*Math.asin(b/n),u<1?n*Math.pow(2,10*(u-=1))*Math.sin((u*o-e)*(2*Math.PI)/t)*-.5+f:n*Math.pow(2,-10*(u-=1))*Math.sin((u*o-e)*(2*Math.PI)/t)*.5+b+f)}();else if("ease-in-out-elastic-strong"===c)v=this.tween(e,t,{o:.1,type:"ease-in-out-elastic-normal"});else if("ease-in-back"===c){var g=1.70158;v=b*(u/=o)*u*((g+1)*u-g)+f}else if("ease-out-back"===c){v=b*((u=u/o-1)*u*(2.70158*u+1.70158)+1)+f}else if("ease-in-out-back"===c){var w=1.70158;v=(u/=o/2)<1?b/2*(u*u*((1+(w*=1.525))*u-w))+f:b/2*((u-=2)*u*((1+(w*=1.525))*u+w)+2)+f}else"ease-in-bounce"===c?v=b-this.tween(e,t,{t:o-u,b:0,c:b,d:o,type:"ease-out-bounce"})+f:"ease-out-bounce"===c?v=(u/=o)<1/2.75?b*(7.5625*u*u)+f:u<2/2.75?b*(7.5625*(u-=1.5/2.75)*u+.75)+f:u<2.5/2.75?b*(7.5625*(u-=2.25/2.75)*u+.9375)+f:b*(7.5625*(u-=2.625/2.75)*u+.984375)+f:"ease-in-out-bounce"===c&&(v=u<o/2?.5*this.tween(e,t,{t:2*u,b:0,c:b,d:o,type:"ease-in-bounce"})+f:.5*this.tween(e,t,{t:2*u-o,b:0,c:b,d:o,type:"ease-out-bounce"})+.5*b+f);return v}},{key:"getNew",value:function(e){var t="function"==typeof this.startX?this.startX():this.startX,n="function"==typeof this.startY?this.startY():this.startY,r="function"==typeof this.endX?this.endX(t):this.endX,a="function"==typeof this.endY?this.endY(n):this.endY,i=this.tweenCurrent,o="function"==typeof i?i():i,s=this.tweenDuration,u="function"==typeof s?s():s,l="function"==typeof this.tweenType?this.tweenType():this.tweenType,c="function"==typeof this.size?this.size():this.size,h="function"==typeof this.image?this.image(e):this.image,f={};return this.onCreate(f),f.id=e,f.startX=t,f.startY=n,f.originX=f.startX,f.originY=f.startY,f.x=t,f.y=n,f.endX=r,f.endY=a,f.terminalX=f.endX,f.terminalY=f.endY,f.tweenCurrent=o,f.tweenDuration=u,f.tweenType=l,f.onEnd=this.onParticleEnd,f.size=c,this.windStatic?(f.windX="function"==typeof this.windX?this.windX():this.windX,f.windY="function"==typeof this.windY?this.windY():this.windY):(f.windX=this.windX||0,f.windY=this.windY||0),f.color=this.color,f.image=h,f.imageWidth=this.imageWidth,f.imageHeight=this.imageHeight,this.afterCreate(f),f}},{key:"reevaluate",value:function(e){var t="function"==typeof this.startX?this.startX():this.startX,n="function"==typeof this.startY?this.startY():this.startY,r="function"==typeof this.endX?this.endX(t):this.endX,a="function"==typeof this.endY?this.endY(n):this.endY;e.x=e.originX=e.startX=t,e.y=e.originY=e.startY=n,e.endX=e.terminalX=r,e.endY=e.terminalY=a,this.windStatic&&(e.windX="function"==typeof this.windX?this.windX():this.windX,e.windY="function"==typeof this.windY?this.windY():this.windY),e.tweenCurrent=0}},{key:"populate",value:function(e){var t=this;e?(this.collection.push(this.getNew(this.collection.length)),this.collection.length<this.quantity&&("function"==typeof e?setTimeout(function(){return t.populate(e)},e()):"number"==typeof e?setTimeout(function(){return t.populate(e)},e):setTimeout(function(){return t.populate()},1))):this.collection=Array.from(new Array(this.quantity),function(e,n){return t.getNew(n)})}},{key:"draw",value:function(e,t){var n=this,r=e,a=r.image,i=r.size||1;if(t?this.ctx.fillStyle=this.clearColor:"function"==typeof e.color?this.ctx.fillStyle=e.color(e):this.ctx.fillStyle=e.color,a&&a instanceof Array&&a.length){var o=r.imageWidth/a[0].length,s=r.imageHeight/a.length;a.forEach(function(e,a){e.forEach(function(e,u){t&&e?n.ctx.fillRect(r.x+u*o-1,r.y+a*s-1,i*o+1,i*s+1):e&&n.ctx.fillRect(r.x+u*o,r.y+a*s,i*o,i*s)})})}else if(a){var u=r.x-r.imageWidth/2,l=r.y-r.imageHeight/2;r.imageWidth&&r.imageHeight?this.ctx.drawImage(a,u,l,r.imageWidth,r.imageHeight):this.ctx.drawImage(a,u,l)}else this.ctx.fillRect(r.x,r.y,i,i)}},{key:"clear",value:function(e){this.draw(e,!0)}},{key:"process",value:function(){var e=this;this.active&&(this.clearFrame(),this.getFrame(),this.afterDraw(),1===this.tweenSpeed?requestAnimationFrame(function(){return e.process()}):setTimeout(function(){return e.process()},this.tweenSpeed))}},{key:"clearFrame",value:function(){this.clear&&this.background?this.ctx.putImageData(this.background,0,0):this.clear&&(this.ctx.fillStyle=this.clearColor,this.ctx.fillRect(0,0,this.easel.viewport.w,this.easel.viewport.h))}},{key:"getFrame",value:function(){var e=this;this.collection.forEach(function(t){t.imageClear&&e.clear(t),e.constructor.wind(t),e.onMove(t),(t.x<0||t.y<0||t.x>e.easel.viewport.w||t.y>e.easel.viewport.h)&&e.onEscape(t),(0|t.x)!=(0|t.endX)&&(t.x=e.tween(t,"x")),(0|t.y)!=(0|t.endY)&&(t.y=e.tween(t,"y")),t.tweenCurrent++,t.tweenCurrent===t.tweenDuration&&t.onEnd&&t.onEnd.call(e,t),e.draw(t)})}},{key:"onMove",value:function(){}},{key:"onCreate",value:function(){}},{key:"afterCreate",value:function(){}},{key:"onParticleEnd",value:function(){}},{key:"onEscape",value:function(){}},{key:"afterDraw",value:function(){}}],[{key:"reset",value:function(e){e.x=e.startX=e.originX,e.y=e.startY=e.originY,e.endX=e.terminalX,e.endY=e.terminalY,e.tweenCurrent=0}},{key:"wind",value:function(e){"function"==typeof e.windX?e.endX+=e.windX(e):e.windX&&(e.endX+=e.windX),"function"==typeof e.windY?e.endY+=e.windY(e):e.windY&&(e.endY+=e.windY),"function"==typeof e.windX?e.startX+=e.windX(e):e.windX&&(e.startX+=e.windX),"function"==typeof e.windY?e.startY+=e.windY(e):e.windY&&(e.startY+=e.windY)}}]),e}()},"./src/lib/ionCloud.js":
/*!*****************************!*\
  !*** ./src/lib/ionCloud.js ***!
  \*****************************/
/*! no static exports found */function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.IonCloud=void 0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(/*! ./clouds/ */"./src/lib/clouds/index.js"));t.IonCloud=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.easel=t,this.Ion=n,this.camera={x:t.viewport.w/2,y:t.viewport.h/2,dx:0,dy:0},this.collection=[],this.beforeDraw={},this.clouds=i,this.state="initial"}return a(e,[{key:"animate",value:function(e,t){var n=this.collection.find(function(e){return!e.active});n?this.clouds[e].call(this,r({ion:n},t)):this.collection.push(this.clouds[e].call(this,t))}},{key:"makeState",value:function(e,t){this.beforeDraw[e]=t}},{key:"clearScene",value:function(){this.background?this.easel.ctx.putImageData(this.background,0,0):(this.easel.ctx.fillStyle="#000",this.easel.ctx.fillRect(0,0,this.easel.viewport.w,this.easel.viewport.h))}},{key:"clean",value:function(){this.collection.forEach(function(e){return e.active=!1})}},{key:"draw",value:function(){var e=this;this.clearScene(),this.beforeDraw[this.state]&&this.beforeDraw[this.state](),this.collection.forEach(function(t,n,r){t.states.includes(e.state)&&(t.finished?("function"==typeof t.onFinished&&t.onFinished(),r.splice(n,1)):t.active&&t.getFrame())}),requestAnimationFrame(function(){return e.draw()})}}]),e}()},"./src/lib/phaser.js":
/*!***************************!*\
  !*** ./src/lib/phaser.js ***!
  \***************************/
/*! no static exports found */function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();t.Phaser=function(){function e(t,n){var r=n.interval,a=n.phase,i=n.colors,o=n.x,s=n.y,u=n.width,l=n.height,c=n.makeGradient;if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.interval=r||100,this.frame=this.interval,this.phase=a,this.easel=t,this.x=o,this.y=s,this.width=u,this.height=l,this.makeGradient=c,this.colors=i,this.colorD=[],this.err=0,!t)throw new Error("Error "+ ++this.err+": Easel missing.");this.err||this.initialize()}return r(e,[{key:"initialize",value:function(){var e,t,n,r,a,i=this;this.colors.forEach(function(o,s){e={},t={r:0,g:0,b:0},r=0,n=0,Object.keys(o).forEach(function(u){var l=o[u],c={r:l.r-t.r,g:l.g-t.g,b:l.b-t.b};if(1===r?(n=c,a=u):r>1&&(e[u]=c),r++,t={r:l.r,g:l.g,b:l.b},u===i.phase){var h=i.colors[s].current;h.r=t.r,h.g=t.g,h.b=t.b}}),e[a]={r:n.r-t.r,g:n.g-t.g,b:n.b-t.b},i.colorD.push(e)})}},{key:"getNextPhase",value:function(){var e,t=this,n=0,r="";for(e in this.colors[0]){if(n){r=e;break}e===this.phase&&(n=1)}if(0===r.length)for(e in this.colors[0])if("current"!==e){r=e;break}return this.colors.forEach(function(e,n){e.current.r=e[t.phase].r,e.current.g=e[t.phase].g,e.current.b=e[t.phase].b}),r}},{key:"drawNext",value:function(e){var t=this,n=this.makeGradient();this.colors.forEach(function(e,t){var r=e.current;n.addColorStop(t,"rgb("+(0|r.r)+","+(0|r.g)+","+(0|r.b)+")")}),this.easel.ctx.fillStyle=n,this.easel.ctx.fillRect(this.x,this.y,this.width,this.height),this.frame===this.interval&&(this.frame=-1,this.phase=this.getNextPhase()),this.colors.forEach(function(e,n){var r=e.current,a=t.colorD[n][t.phase];r.r+=a.r/t.interval,r.g+=a.g/t.interval,r.b+=a.b/t.interval}),this.frame++}}]),e}()}})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,